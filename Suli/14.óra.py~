import math

def feladat(n):
    print(f"{n}.feladat: ")

feladat(1)

def olvasd_be():
    try:
        with open('jel.txt', 'r') as file:
            adatok = [sor.strip().split() for sor in file.readlines()]
            return [[int(x) for x in sor] for sor in adatok]
    except FileNotFoundError:
        print("A jel.txt fájl nem található.")
        return []

adatok = olvasd_be()
#print(adatok)

feladat(2)

def kerd_felhasznalo_jel_sorszamat():
    while True:
        try:
            jel_sorszam = int(input("Adja meg a jel sorszámát: "))
            if jel_sorszam < 1:
                print("A jel sorszáma nem lehet negatív!")
            else:
                return jel_sorszam
        except ValueError:
            print("Hibás bemenő érték! Kérlek, adja meg a jel sorszámát egész számként!")

jel_sorszam = kerd_felhasznalo_jel_sorszamat()
jeladatok = adatok[jel_sorszam - 1]
print(f"A {jel_sorszam}. jeladás x={jeladatok[3]}, y={jeladatok[4]} koordinátái.")

feladat(3)

def eltelt(negyed_ora, negyed_perc, masodperc, x1, y1, x2, y2):
    ora_diff = abs(negyed_ora - negyed_perc)
    if ora_diff > 0.5:
        ora_diff = 1 - ora_diff
    else:
        ora_diff = ora_diff

    perc_diff = abs(masodperc - negyed_perc * 15)
    if perc_diff > 0.25 * 15:
        perc_diff = 0.75 * 15 - perc_diff
    else:
        perc_diff = perc_diff

    divisor = (x2 - x1) + (y2 - y1) * 1j
    if divisor == 0:
        raise ValueError("Az osztó nulla, ellenőrizd a bemeneti adatokat!")

    return (ora_diff * 60 * 60 + perc_diff * 60 + masodperc - x1 - y1 * 1j) / divisor

jeladatok = [
    [0, 0, 0, 1, 1],
    [0, 0, 15, 2, 2],
    [0, 0, 30, 3, 3],
    [0, 0, 45, 3, 3],
]

for i in range(1, len(jeladatok)):
    try:
        x1, y1, x2, y2 = jeladatok[i - 1][3], jeladatok[i - 1][4], jeladatok[i][3], jeladatok[i][4]
        elteltek = eltelt(jeladatok[i - 1][0], jeladatok[i - 1][1], jeladatok[i - 1][2], x1, y1, x2, y2)
        print(f"A {i}. és {i + 1}. jeladás között {elteltek:.3f} másodperc telt el.")
    except ValueError as e:
        print(f"Hiba a {i}. és {i + 1}. jeladás között: {e}")

feladat(4)

def ido_kulonbseg(kezdo_ido, vegido):
    ora_kulonbseg = vegido[0] - kezdo_ido[0]
    perc_kulonbseg = vegido[1] - kezdo_ido[1]
    mperc_kulonbseg = vegido[2] - kezdo_ido[2]

    if mperc_kulonbseg < 0:
        perc_kulonbseg -= 1
        mperc_kulonbseg += 60
    if perc_kulonbseg < 0:
        ora_kulonbseg -= 1
        perc_kulonbseg += 60

    return f"{ora_kulonbseg}:{perc_kulonbseg}:{mperc_kulonbseg}"

kezdo_ido = adatok[0][:3]
vegido = adatok[-1][:3]

ido_kulonbseg = ido_kulonbseg(kezdo_ido, vegido)
print(f"Az első és az utolsó észlelés között {ido_kulonbseg} idő telt el.")

feladat(5)

def teglalap_sarkai(adatok):
    x_min = min(adat[3] for adat in adatok)
    x_max = max(adat[3] for adat in adatok)
    y_min = min(adat[4] for adat in adatok)
    y_max = max(adat[4] for adat in adatok)

    return (x_min, y_min), (x_max, y_max)

bal_also_sarok, jobb_felso_sarok = teglalap_sarkai(adatok)
print(f"A téglalap bal alsó sarka: {bal_also_sarok}")
print(f"A téglalap jobb felső sarka: {jobb_felso_sarok}")

feladat(6)
"""
def elmozdulasok_osszege(adatok):
    osszeg = 0
    for i in range(len(adatok) - 1):
        x1, y1 = adatok[i][3], adatok[i][4]
        x2, y2 = adatok[i + 1][3], adatok[i + 1][4]
        tavolsag = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
        osszeg += tavolsag
    return round(osszeg, 3)

elmozdulasok_osszege = elmozdulasok_osszege(adatok)
print(f"A jeladó elmozdulásainak összege: {elmozdulasok_osszege} egység")

"""